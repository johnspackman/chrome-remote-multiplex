{"version":3,"sources":["cmdline.js"],"names":["PACKAGE","require","argv","usage","options","default","describe","type","help","server","remoteClient","connectTo","listenPort","serverPort","logging","debug","listen","then","console","log","name","version","bugs","url","Promise","catch","err"],"mappings":";;AAEA;;;;;;AAEA,IAAIA,UAAUC,QAAQ,iBAAR,CAAd;;AAEA,IAAIC,OAAOD,QAAQ,OAAR,EACRE,KADQ,CACF,WADE,EAERC,OAFQ,CAEA;AACP,gBAAc;AACZC,aAAS,gBADG;AAEZC,cAAU,sDAFE;AAGZC,UAAM;AAHM,GADP;AAMP,iBAAe;AACbF,aAAS,IADI;AAEbC,cAAU,6CAFG;AAGbC,UAAM;AAHO,GANR;AAWP,WAAS;AACPF,aAAS,KADF;AAEPC,cAAU,sBAFH;AAGPC,UAAM;AAHC;AAXF,CAFA,EAmBRC,IAnBQ,GAoBRN,IApBH;;AAsBA,IAAIO,SAAS,wBAAoB;AAC/BC,gBAAcR,KAAKS,SADY;AAE/BC,cAAYV,KAAKW,UAFc;AAG/BC,WAASZ,KAAKa,KAAL,GAAa,OAAb,GAAuB;AAHD,CAApB,CAAb;AAKAN,OAAOO,MAAP,GACGC,IADH,CACQ,YAAM;AACVC,UAAQC,GAAR,CACInB,QAAQoB,IAAR,GAAe,IAAf,GAAsBpB,QAAQqB,OAA9B,GAAwC,IAAxC,GACA,mBADA,GACsBrB,QAAQsB,IAAR,CAAaC,GADnC,GACyC,MADzC,GAEA,gDAFA,GAEmDd,OAAOL,OAAP,CAAeM,YAFlE,GAGA,mDAHA,GAGsDD,OAAOL,OAAP,CAAeQ,UAJzE;AAKA,SAAO,IAAIY,OAAJ,CAAY,YAAM,CAAE,CAApB,CAAP;AACD,CARH,EASGC,KATH,CASS,UAACC,GAAD;AAAA,SAASR,QAAQC,GAAR,CAAY,oDAAoDO,GAAhE,CAAT;AAAA,CATT","file":"cmdline.js","sourcesContent":["\n\nimport MultiplexServer from \"./multiplex\";\n\nvar PACKAGE = require(\"../package.json\");\n\nvar argv = require(\"yargs\")\n  .usage(\"$0 [args]\")\n  .options({\n    \"connect-to\": {\n      default: \"localhost:9222\",\n      describe: \"Host and port to connect to, running Chrome Headless\",\n      type: \"string\"\n    },\n    \"server-port\": {\n      default: 9223,\n      describe: \"The port for this proxy server to listen on\",\n      type: \"number\"\n    },\n    \"debug\": {\n      default: false,\n      describe: \"Include debug output\",\n      type: \"bool\"\n    }\n  })\n  .help()\n  .argv;\n\nvar server = new MultiplexServer({\n  remoteClient: argv.connectTo,\n  listenPort: argv.serverPort,\n  logging: argv.debug ? \"debug\" : \"info\"\n});\nserver.listen()\n  .then(() => {\n    console.log(\n        PACKAGE.name + \" v\" + PACKAGE.version + \"\\n\" +\n        \"Report issues at \" + PACKAGE.bugs.url + \"\\n\\n\" +\n        \"Connected to remote headless Chrome at http://\" + server.options.remoteClient + \n        \"\\nTo start debugging, browse to http://localhost:\" + server.options.listenPort);\n    return new Promise(() => {});\n  })\n  .catch((err) => console.log(\"Error while talking to remote headless Chrome: \" + err));\n\n"]}